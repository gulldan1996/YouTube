{"version":3,"sources":["redux/action.js","redux/reducer.js","components/YouTubeHandler.js","components/YouTube.js","components/ChooseLanguageHandler.js","components/ChooseLanguage.js","App.js","serviceWorker.js","index.js"],"names":["LANG_CHANGED","SELECTED_LANG","initialState","lang","selected","en","chooseLang","button","ru","search","placeholder","connect","state","dispatch","props","react_default","a","createElement","undefined","langChanged","type","selectedLang","Fragment","react_router_dom","to","react_router","exact","path","render","onClick","component","YouTubeHandler","store","createStore","arguments","length","action","Object","objectSpread","applyMiddleware","thunk","App","es","ChooseLanguageHandler","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAAaA,EAAe,eACfC,EAAgB,gBCC7B,IAAMC,EAAe,CACnBC,KAAM,KACNC,SAAU,KACVC,GAAI,CACFC,WAAY,yBACZC,OAAQ,CACNF,GAAI,UACJG,GAAI,WAENC,OAAQ,CACNC,YAAa,uBAGjBF,GAAI,CACFF,WAAY,yIACZC,OAAQ,CACNF,GAAI,+DACJG,GAAI,8CAENC,OAAQ,CACNC,YAAa,uHCNJC,kBAZf,SAAyBC,GAEvB,MAAO,CACLT,KAFWS,EAAMA,EAAMT,QAM3B,SAA4BU,GAC1B,MAAO,IAIMF,CCdA,SAAiBG,GAC9B,OACEC,EAAAC,EAAAC,cAAA,gBACkBC,IAAfJ,EAAMX,KAAqBW,EAAMX,KAAKG,WAAa,QCY3CK,kBAbf,SAAyBC,GACvB,MAAO,CACLR,SAAUQ,EAAMR,WAIpB,SAA4BS,GAC1B,MAAO,CACLM,YAAa,SAAChB,GAAD,OAAUU,EJTpB,SAAqBM,GAC1B,MAAO,CACLC,KAAMpB,EACNmB,eIMgCA,CAAYhB,KAC5CkB,aAAc,kBAAMR,EJFf,CACLO,KAAMnB,OIKKU,CCZA,SAAwBG,GACrC,OACGA,EAAMV,SACPW,EAAAC,EAAAC,cAACF,EAAAC,EAAMM,SAAP,KACGP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,UAAT,oBACHT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,OAAQ,kBAAMb,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAC1CF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,IAAIK,QAAS,kBAAMf,EAAMK,YAAY,QAA9C,WAAmEJ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACxEF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,MAAMK,QAAS,kBAAMf,EAAMK,YAAY,QAAhD,eAGFJ,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOE,KAAK,IAAIG,UAAWC,IAC3BhB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOE,KAAK,MAAMG,UAAWC,MAVfhB,EAAAC,EAAAC,cAAA,UAAQY,QAASf,EAAMO,cAAvB,qBCChBW,EAAQC,YLmBP,WAAoD,IAA9BrB,EAA8BsB,UAAAC,OAAA,QAAAjB,IAAAgB,UAAA,GAAAA,UAAA,GAAtBhC,EAAckC,EAAQF,UAAAC,OAAA,EAAAD,UAAA,QAAAhB,EACzD,OAAQkB,EAAOhB,MACb,KAAKpB,EAMH,OAAOqC,OAAAC,EAAA,EAAAD,CAAA,GACFzB,EADL,CAEET,KAAMiC,EAAOjB,cAEjB,KAAKlB,EACH,OAAOoC,OAAAC,EAAA,EAAAD,CAAA,GACFzB,EADL,CAEER,UAAU,IAEd,QACE,OAAOQ,IKrC2B2B,YAAgBC,MAYzCC,MAVf,WACE,OACE1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAUV,MAAOA,GACfjB,EAAAC,EAAAC,cAAC0B,EAAD,SCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCVNC,IAASrB,OACPb,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACiC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC","file":"static/js/main.87660086.chunk.js","sourcesContent":["export const LANG_CHANGED = 'lang_changed';\r\nexport const SELECTED_LANG = 'selected_lang';\r\n\r\nexport function langChanged(langChanged) {\r\n  return {\r\n    type: LANG_CHANGED,\r\n    langChanged\r\n  }\r\n}\r\n\r\nexport function selectedLang() {\r\n  return {\r\n    type: SELECTED_LANG\r\n  }\r\n}\r\n\r\n\r\n\r\n","import { LANG_CHANGED, SELECTED_LANG } from './action';\r\n\r\nconst initialState = {\r\n  lang: null,\r\n  selected: null,\r\n  en: {\r\n    chooseLang: 'Please choose language',\r\n    button: {\r\n      en: 'English',\r\n      ru: 'Russian'\r\n    },\r\n    search: {\r\n      placeholder: 'Search on YouTube.',\r\n    }\r\n  },\r\n  ru: {\r\n    chooseLang: 'Пожалуйста выбирите язык',\r\n    button: {\r\n      en: 'Английский',\r\n      ru: 'Русский'\r\n    },\r\n    search: {\r\n      placeholder: 'Искать видео на YouTube'\r\n    }\r\n  }\r\n};\r\n\r\nexport function getNextState(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LANG_CHANGED:\r\n        // let item = { lang: \"en\" };\r\n        // let state_string = JSON.stringify(item);\r\n        // localStorage.setItem(\"my_saved_state\", state_string);\r\n        // let returned_state_string = localStorage.getItem(\"my_saved_state\");\r\n        // let returned_state_object = JSON.parse(returned_state_string);\r\n      return {\r\n        ...state,\r\n        lang: action.langChanged\r\n      }\r\n    case SELECTED_LANG:\r\n      return {\r\n        ...state,\r\n        selected: true\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n","import { connect } from 'react-redux';\r\nimport {} from \"../redux/action\";\r\nimport YouTube from './YouTube'\r\n\r\nfunction mapStateToProps(state) {\r\n  const lang = state[state.lang];\r\n  return {\r\n    lang: lang\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(YouTube);\r\n","import React from 'react';\r\n\r\nexport default function YouTube(props) {\r\n  return (\r\n    <div>\r\n      {props.lang !== undefined ? props.lang.chooseLang : null}\r\n    </div>\r\n  )\r\n}\r\n","import { connect } from 'react-redux';\r\nimport { langChanged, selectedLang } from \"../redux/action\";\r\nimport ChooseLanguage from './ChooseLanguage';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    selected: state.selected\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    langChanged: (lang) => dispatch(langChanged(lang)),\r\n    selectedLang: () => dispatch(selectedLang())\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChooseLanguage);\r\n","import React from 'react';\r\nimport { Route, Link, Switch } from 'react-router-dom';\r\nimport YouTubeHandler from './YouTubeHandler';\r\n\r\n\r\nexport default function ChooseLanguage(props) {\r\n  return (\r\n    !props.selected ? <button onClick={props.selectedLang}>Choose Language</button> :\r\n    <React.Fragment>\r\n       <Link to=\"/langs\">Changed language</Link>\r\n    <Switch>\r\n      <Route exact path=\"/langs\" render={() => <div><br/>\r\n          <Link to=\"/\" onClick={() => props.langChanged('en')}>English</Link><br/><br/>\r\n          <Link to=\"/ru\" onClick={() => props.langChanged('ru')}>Russian</Link>\r\n          </div>}\r\n        />\r\n        <Route path=\"/\" component={YouTubeHandler} />\r\n        <Route path=\"/ru\" component={YouTubeHandler} />\r\n      </Switch>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { getNextState } from './redux/reducer';\r\nimport './App.css';\r\nimport ChooseLanguageHandler from './components/ChooseLanguageHandler';\r\n\r\nconst store = createStore(getNextState, applyMiddleware(thunk));\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Provider store={store}>\r\n        <ChooseLanguageHandler />\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n  );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}